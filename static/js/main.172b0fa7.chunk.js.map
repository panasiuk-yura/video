{"version":3,"sources":["Video.jsx","VideoTest.jsx","App.js","reportWebVitals.js","index.js"],"names":["MainPlayerMob","url","playerRef","useRef","useState","isPlay","setIsPlay","isMuted","setIsMuted","className","onClick","ref","width","height","style","margin","volume","muted","playing","playsinline","onEnded","current","seekTo","TestVideo","document","querySelector","video","pause","play","startPlayback","playsInline","preload","src","type","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"yOA4CeA,EAxCO,SAAC,GAAW,IAAVC,EAAS,EAATA,IAEhBC,EAAYC,iBAAO,MAFM,EAGDC,oBAAS,GAHR,mBAGvBC,EAHuB,KAGfC,EAHe,OAICF,oBAAS,GAJV,mBAIvBG,EAJuB,KAIdC,EAJc,KAkB/B,OACE,sBACEC,UAAS,uBAAkBJ,EAAO,0BAA0B,IAC5DK,QAfe,WACjBF,GAAW,GACXF,GAAWD,IAWX,UAIE,qBAAKI,UAAU,uBAAf,SAAsC,uCACtC,cAAC,IAAD,CACEE,IAAKT,EACLU,MAAM,QACNC,OAAO,OACPC,MAAO,CAACC,OAAQ,UAChBC,OAAQ,EACRC,MAAOV,EACPW,QAASb,EACTJ,IAAKA,EACLkB,aAAW,EACXC,QAvBY,WAChBlB,EAAUmB,QAAQC,OAAO,GACzBhB,GAAU,GACVE,GAAW,UCdFe,EAAY,WAAO,IAAD,EACDnB,oBAAS,GADR,mBACtBC,EADsB,KACdC,EADc,KAEfkB,SAASC,cAAc,WAarC,OACE,sBAAKf,QAAS,kBAZM,WACpB,IAAIgB,EAAQF,SAASC,cAAc,WAC/BpB,GACFC,GAAU,GACVoB,EAAMC,UAENrB,GAAU,GACVoB,EAAME,QAKYC,IAApB,2BACE,uBAAOjB,MAAM,OAAOC,OAAO,OAAOiB,aAAW,EAACrB,UAAU,SAASsB,QAAQ,OAAzE,SACE,wBAAQC,IAAI,mFAAmFC,KAAK,oBCJ7FC,MAVf,WACE,OACE,sBAAKzB,UAAU,MAAf,UACE,cAAC,EAAD,CAAeR,IANR,gDAOP,cAAC,EAAD,CAAeA,IANR,qFAOP,cAAC,EAAD,QCDSkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtB,SAASuB,eAAe,SAM1BZ,M","file":"static/js/main.172b0fa7.chunk.js","sourcesContent":["import { useRef, useState } from 'react';\nimport ReactPlayer from 'react-player';\n\n\nconst MainPlayerMob = ({url}) => {\n \n  const playerRef = useRef(null)\n  const [ isPlay, setIsPlay ] = useState(false);\n  const [ isMuted, setIsMuted ] = useState(true);\n\n  const handlePlay = () => {\n    setIsMuted(false);\n    setIsPlay(!isPlay);\n  }\n  \n  const handleEnd = () => {\n    playerRef.current.seekTo(0);\n    setIsPlay(false);\n    setIsMuted(true);\n  }\n  \n\n  return (\n    <div\n      className={`MainPlayerMob${isPlay?' MainPlayerMob--playing':'' }`}\n      onClick={handlePlay}\n    >\n      <div className=\"MainPlayerMob__cover\"><span>+</span></div>\n      <ReactPlayer\n        ref={playerRef}\n        width='200px'\n        height='auto'\n        style={{margin: '0 auto'}}\n        volume={1}\n        muted={isMuted}\n        playing={isPlay}\n        url={url}\n        playsinline\n        onEnded={handleEnd}\n      />\n    </div>\n  )\n};\n\nexport default MainPlayerMob;","import React from 'react'\nimport { useState } from 'react';\n\n\nexport const TestVideo = () => {\n  const [isPlay, setIsPlay] = useState(false);\n  const video = document.querySelector('.video1');\n\n  const startPlayback = () => {\n    let video = document.querySelector('.video1');\n    if (isPlay) {\n      setIsPlay(false);\n      video.pause();\n    } else {\n      setIsPlay(true)\n      video.play();\n    }\n  }\n\n  return (\n    <div onClick={() => startPlayback()}>Start Playback\n      <video width=\"100%\" height=\"auto\" playsInline className=\"video1\" preload=\"auto\">\n        <source src=\"https://www.learningcontainer.com/wp-content/uploads/2020/05/sample-mp4-file.mp4\" type=\"video/mp4\" />\n      </video>\n    </div> \n  )\n};","import './App.css';\n\nimport MainPlayerMob from './Video';\n\nimport { TestVideo } from './VideoTest';\nconst url1 = 'https://www.youtube.com/watch?v=oUFJJNQGwhk';\nconst url2 = 'https://www.learningcontainer.com/wp-content/uploads/2020/05/sample-mp4-file.mp4';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainPlayerMob url={url1}/>\n      <MainPlayerMob url={url2} />\n      <TestVideo />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}